@page "/countries"
@inject HttpClient _client

<h1>Hey Countries</h1>
@if(_countries == null)
{
    <h2>Loading...</h2>
}
else
{
    <button class="btn btn-primary" @onclick="ModalShow">
        Create
    </button>
    foreach(var country in _countries)
    {
        <CountryComponent Country="@country" OnDelete="@OnDelete"></CountryComponent>
    }
}

@if(_showModal)
{
    <div class="modal fade show" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Create new</h4>
                    <button type="button" class="close" @onclick="ModalHide">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_newCountry" OnSubmit="ModalOk">
                        <InputText @bind-Value="_newCountry.Name"></InputText>
                        <button class="btn btn-primary" type="submit">Create!</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    private List<Country> _countries;
    private Country _newCountry = new();
    private bool _showModal;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _countries = await _client.GetFromJsonAsync<List<Country>>(Constant.Country);
    }

    private void ModalShow()
    {
        _showModal = true;
    }

    private void ModalHide() => _showModal = false;

    private async Task ModalOk()
    {
        var resp = await _client.PostAsJsonAsync<Country>(Constant.Country, _newCountry);
        var country = await resp.Content.ReadFromJsonAsync<Country>();
        ModalHide();

        _countries.Add(country);
        StateHasChanged();

        _newCountry = new();
    }

    private void OnDelete(Country deletedCountry)
    {
        _countries.Remove(deletedCountry);
        StateHasChanged();

        _client.DeleteAsync($"{Constant.Country}/{deletedCountry.Id}");
    }
}