@inject HttpClient _client

@if (_state == State.Idle)
{
    <h3>@Game.Name</h3>
    <h5>
        @_country?.Name<br>
        @_genre?.Name<br>
        @_publisher?.Name<br>
    </h5>
    <button class="btn btn-primary" @onclick="GotoEditState">
        Edit!
    </button>
    <button class="btn btn-danger" @onclick="Remove">
        Remove
    </button>
}
else
{
    <EditForm Model="@Game" OnSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="name" @bind-Value="Game.Name" />
        <select @bind="Game.Genre" name="genre" id="genre">
            @foreach (var genre in _genres)
            {
                <option value="@genre.Id">@genre.Name</option>
            }
        </select>
        <select @bind="Game.Country" name="country" id="country">
            @foreach (var country in _countries)
            {
                <option value="@country.Id">@country.Name</option>
            }
        </select>
        <select @bind="Game.Publisher" name="publisher" id="publisher">
            @foreach (var publisher in _publishers)
            {
                <option value="@publisher.Id">@publisher.Name</option>
            }
        </select>
        <button class="btn btn-primary" type="submit">
            Edit!
        </button>
        <button class="btn btn-secondary" @onclick="() => _state = State.Idle">
            Cancel
        </button>
    </EditForm>
}

@code
{
    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public Action<Game> OnDelete { get; set; }

    private State _state;

    private Country _country;
    private List<Country> _countries;
    private Publisher _publisher;
    private List<Publisher> _publishers;
    private Genre _genre;
    private List<Genre> _genres;

    protected override async Task OnParametersSetAsync()
    {
        _state = State.Idle;
        try
        {
            await UpdateInfo();
        }
        catch (Exception e)
        {
            Console.WriteLine("Something was not found..." + e.Data);
        }

        _genres = await GetGenres();
        _publishers = await GetPublishers();
        _countries = await GetCountries();

        base.OnParametersSet();
        StateHasChanged();
    }

    private void GotoEditState()
    {
        _state = State.Edit;
    }

    private async Task HandleSubmit()
    {
        _state = State.Idle;

        await _client.PutAsJsonAsync<Game>(Constant.Game, Game);
        await UpdateInfo();
        StateHasChanged();
    }

    private void Remove()
    {
        OnDelete(Game);
    }

    private async Task UpdateInfo()
    {
        _country = await GetGameCountry();
        _publisher = await GetGamePublisher();
        _genre = await GetGameGenre();
    }

    private async Task<Country> GetGameCountry() => await _client.GetFromJsonAsync<Country>($"{Constant.Country}/{Game.Country}");

    private async Task<Publisher> GetGamePublisher() => await _client.GetFromJsonAsync<Publisher>($"{Constant.Publisher}/{Game.Publisher}");

    private async Task<Genre> GetGameGenre() => await _client.GetFromJsonAsync<Genre>($"{Constant.Genre}/{Game.Genre}");

    private async Task<List<Genre>> GetGenres() => await _client.GetFromJsonAsync<List<Genre>>(Constant.Genre);

    private async Task<List<Publisher>> GetPublishers() => await _client.GetFromJsonAsync<List<Publisher>>(Constant.Publisher);

    private async Task<List<Country>> GetCountries() => await _client.GetFromJsonAsync<List<Country>>(Constant.Country);
}